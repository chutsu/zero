#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>

#include <GLFW/glfw3.h>

#define MAX_IMSHOWS 10
char imshow_titles[MAX_IMSHOWS][100];
unsigned int imshow_texture_ids[MAX_IMSHOWS];
pthread_t imshow_threads[MAX_IMSHOWS];
int nb_imshows = 0;

typedef struct imshow_data_t {
	int index;
	char title[100];
	unsigned int texture_id;

	int img_w;
	int img_h;
	int img_c;
	uint8_t *data;
} imshow_data_t;

imshow_data_t im0;

static void imshow_error_callback(int error, const char* description) {
  fputs(description, stderr);
}

static void imshow_keyboard_callback(GLFWwindow* window,
                         	 	 	 	 	 	 int key,
                         	 	 	 	 	 	 int scancode,
                         	 	 	 	 	 	 int action,
                         	 	 	 	 	 	 int mods) {
  if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
    glfwSetWindowShouldClose(window, GL_TRUE);
  }
}

/* static void imshow_load_image(const int imshow_index, */
/* 				 	 	 	 	 	 	 	  	 	 	const int img_w, */
/*                         	 	 	const int img_h, */
/*                         	 	 	const int img_c, */
/*                         	 	 	const unsigned char *data) { */
/*   glGenTextures(1, &imshow_texture_ids[imshow_index]); */
/*   glBindTexture(GL_TEXTURE_2D, imshow_texture_ids[imshow_index]); */
/*   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR); */
/*   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); */
/*  */
/*   GLenum format = 0; */
/*   switch (img_c) { */
/*   case 1: format = GL_RED; break; */
/*   case 3: format = GL_RGB; break; */
/*   case 4: format = GL_RGBA; break; */
/*   } */
/*   glTexImage2D(GL_TEXTURE_2D, */
/*                0, */
/*                format, */
/*                img_w, */
/*                img_h, */
/*                0, */
/*                format, */
/*                GL_UNSIGNED_BYTE, */
/*                data); */
/*   glEnable(GL_TEXTURE_2D); */
/* } */

void *imshow_thread(void *data) {
	imshow_data_t *im = (imshow_data_t *) data;

	/* Create window */
  GLFWwindow *win = glfwCreateWindow(640, 480, im->title, NULL, NULL);
  if (!win) {
    glfwTerminate();
    return NULL;
  }
  glfwMakeContextCurrent(win);
  glfwSwapInterval(1);
  glfwSetKeyCallback(win, imshow_keyboard_callback);
  glfwSetErrorCallback(imshow_error_callback);

	/* Load image data */
  glGenTextures(1, &im->texture_id);
  glBindTexture(GL_TEXTURE_2D, im->texture_id);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  GLenum format = 0;
  switch (im->img_c) {
  case 1: format = GL_RED; break;
  case 3: format = GL_RGB; break;
  case 4: format = GL_RGBA; break;
  }
  glTexImage2D(GL_TEXTURE_2D,
               0,
               format,
               im->img_w,
               im->img_h,
               0,
               format,
               GL_UNSIGNED_BYTE,
               data);
  glEnable(GL_TEXTURE_2D);

	/* Loop  */
  while (!glfwWindowShouldClose(win)) {
    int width, height;
    glfwGetFramebufferSize(win, &width, &height);
    float ratio = width / (float) height;

    glViewport(0, 0, width, height);
    glClear(GL_COLOR_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-ratio, ratio, -1.f, 1.f, 1.f, -1.f);

		glMatrixMode(GL_MODELVIEW);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glLoadIdentity();

		glBindTexture(GL_TEXTURE_2D, im->texture_id);
		glBegin(GL_QUADS);
			glTexCoord2f(0.0f, 0.0f);
			glVertex3f(-1.0, -1.0, 0.0);
			glTexCoord2f(1.0f, 0.0f);
			glVertex3f(1.0, -1.0, 0.0);
			glTexCoord2f(1.0f, 1.0f);
			glVertex3f(1.0, 1.0, 0.0);
			glTexCoord2f(0.0f, 1.0f);
			glVertex3f(-1.0, 1.0, 0.0);
		glEnd();
		glFlush();

    glfwSwapBuffers(win);
    glfwPollEvents();
  }
  glfwDestroyWindow(win);

  return NULL;
}

void msleep (unsigned int ms) {
	int microsecs;
	struct timeval tv;
	microsecs = ms * 1000;
	tv.tv_sec  = microsecs / 1000000;
	tv.tv_usec = microsecs % 1000000;
	select (0, NULL, NULL, NULL, &tv);
}

int gui_init() {
  if (!glfwInit()) {
    return -1;
  }

	return 0;
}

void imshow_create(const char *title) {
	strcpy(imshow_titles[nb_imshows], title);

	strcpy(im0.title, title);
  pthread_create(&imshow_threads[nb_imshows], NULL, imshow_thread, (void *) &im0);
	nb_imshows++;
	msleep(100);  /* Stops multiple GLFW calls at the same time */
}

void imshow_loop() {
	for (int i = 0; i < nb_imshows; i++) {
		pthread_join(imshow_threads[i], NULL);
	}
}

void imshow_stats() {
	for (int i = 0; i < nb_imshows; i++) {
		printf("imshow[%d]: %s\n", i, imshow_titles[i]);
	}
}

void gui_stop() {
  glfwTerminate();
}

int main(void) {
	if (gui_init() != 0) {
		return -1;
	}

	imshow_create("Hello World");
	/* imshow_create("Hello title"); */
	imshow_loop();
	imshow_stats();

  return 0;
}
